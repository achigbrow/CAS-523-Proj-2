# B_problems.py
 
import math



def nchoosek(n,k):
  return math.factorial(n) // math.factorial(k) // math.factorial(n - k)
  
n = 600 # 30000 29903
set = 'spike genome'

aminos_to_basepairs = 20/64 

print('Part 1 - Calculations B (antigetical neutrality)')

#################

#QB1-7 Find how many genomes are antigenically neutral 

# 3138
rbd = 600 # full length of recepter binding domain 

print('QB1-7 the spike protein receptor binding domain has ',rbd,' basepairs\n')

# B-1
M = nchoosek(rbd,1)*pow(3,1)
print('QB-1 there are ',M,' combinations in the recepter binding domain after 1 mutatation')

# B-2
escape_sites = 5 # 346, 444, 484, 486, 490
a = escape_sites/rbd

non = M*a
syn = M*(1-a)

print('QB-2 there are ',syn,' synonymous and ',non,' non synonymous antigenic combinations in the recepter binding domain after 1 mutatation')

  
#QB3 How many genomes are in a 3-step neutral network?

M = nchoosek(rbd,0)+nchoosek(rbd,1)+nchoosek(rbd,2)+nchoosek(rbd,3)

print('QB3 there are ',M,' unique combinations in the 3-step neutral network')




#QB4 How many genomes are 1 mutation away from M?

M2 = nchoosek(rbd,4)

print('QB4 there are ',M2,' unique genome combinations 1 mutation away from ',M)

#QB5 How many of M2 are synonymous and non-synonymous (statistical estimate)?

num_aminos = 20
num_basepairs = pow(4,3) # 4^3 = 64 total AGCT permutations


ratio = (num_aminos/num_basepairs)
syn = M2*ratio
non = M2*(1-ratio)

print('QB-5 ',syn,' are synonymous ( ',ratio*100,' percent )',non,' are non-synonymous ( ',(1-ratio)*100,' percent')

#QB6 How fast do synonymous and non-synonymous mutations accumulate in an n-step neutral network?
print('QB-6')
ratio = (num_aminos/num_basepairs)
total = 0
for k in range(0,4):
  total += nchoosek(n,k)
  
  print('there are ',total,' genomes after ',k,'-steps')
  
  syn = total*ratio
  non = total*(1-ratio)
  
  print(syn,' are synonymous ( ',ratio*100,' percent )',non,' are non-synonymous ( ',(1-ratio)*100,' percent )')


