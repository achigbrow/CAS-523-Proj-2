# A_problems.py
 
import math



def nchoosek(n,k):
  return math.factorial(n) // math.factorial(k) // math.factorial(n - k)
  
n = 600 # 30000 29903
set = 'spike genome'

aminos_to_basepairs = 20/64 

print('Part 1 - Calculations')

#################

print('There are ',n,' basepairs in ',set)

"""
for k in range(0,4):

  combos = nchoosek(n,k)
  bp = combos*math.pow(3,k)

# nchoosek(n,k) becomes unitless 

  print(n,' basepairs per genome, ',k,' mutations, ',combos,' genome combinations without repetitions (reversions), ',bp,' basepair combinations\n')
  """
  
#QA1 How many basepair combinations after 1 mutation?

print('n=',n)
k = 1
print('k=',k)

combos = nchoosek(n,k)
N = combos*math.pow(3,k)

# nchoosek(n,k) is unitless 

print(n,' basepairs, ',k,' mutations, ',combos,' genome combinations without repetitions (reversions), ',N,' basepair combinations\n')

#QA2 How many are synonymous and how many are non-synonymous?


print('QA-2')
num_aa = 20
num_bp = 64 # total possible AGCT permutations

print('20/64 or ',(aminos_to_basepairs),' is the ratio of possible amino acids ',num_aa,' to the ratio of total basepair permutations  ',num_bp,' (4^3)')


syn = N*aminos_to_basepairs
non = N*(1-aminos_to_basepairs)

print('Out of ',N,' basepair combinations, ',syn,' are synonymous ( ',aminos_to_basepairs*100,' percent )',non,' are non-synonymous ( ',(1-aminos_to_basepairs)*100,' percent')
 
  
  
#QA3 How many genomes are in a 3-step neutral network?

N = nchoosek(n,0)+nchoosek(n,1)+nchoosek(n,2)+nchoosek(n,3)

print('QA3 there are ',N,' unique genome combinations in the 3-step neutral network')


#QA4 How many genomes are 1 mutation away from N?

N2 = nchoosek(n,4)

print('QA4 there are ',N2,' unique genome combinations 1 mutation away from ',N)

#QA5 How many of N2 are synonymous and non-synonymous (statistical estimate)?

syn = N2*aminos_to_basepairs
non = N2*(1-aminos_to_basepairs)

print('QA5 ',syn,' are synonymous ( ',aminos_to_basepairs*100,' percent )',non,' are non-synonymous ( ',(1-aminos_to_basepairs)*100,' percent')

#QA6 How fast do synonymous and non-synonymous mutations accumulate in an n-step neutral network?
print('QA6')
total = 0
for k in range(0,4):
  total += nchoosek(n,k)
  
  print('there are ',total,' genomes after ',k,'-steps')
  
  syn = total*aminos_to_basepairs
  non = total*(1-aminos_to_basepairs)
  
  print(syn,' (~1/3) are synonymous, ',non,' are non-synonymous (~2/3)')
  
  
  
#QA7 Explain what exploration of NN's edges means for viral evolution

"""
A neutral network allows a virus to explore the variant space. 

Exploration at the edges of neutral networks refers to the process whereby evolution explores new genetic variations that are only slightly different from existing variations. These new variations are found in the vicinity of existing ones on the so-called neutral networks.

Neutral networks are sets of genetic sequences that exhibit the same function or phenotype, despite having different sequences. Genetic variations that are found within these networks are considered to be neutral because they do not significantly affect the organism's fitness.

In the case of viral evolution, exploration at the edges of neutral networks allows for the emergence of new viral strains that are slightly different from existing ones, but still able to replicate and infect host cells. These new strains can then be subject to natural selection and may have a higher fitness than their predecessors.

This dynamic process is particularly relevant for RNA viruses, which have high mutation rates and can rapidly evolve to evade host immune responses or to adapt to new hosts. 
"""
